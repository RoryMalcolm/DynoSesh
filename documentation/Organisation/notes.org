* Dynamic Session Types Thesis
** Bookmarks
*** "Session Types: Towards safe and fast reconfigurable programming"
    http://www.doc.ic.ac.uk/~cn06/pub/2012/heart/paper.pdf
*** "Session Types for Rust" - Munksgaard
    http://munksgaard.me/papers/laumann-munksgaard-larsen.pdf
*** "Session types in programming languages --- a collection of implementations"
    http://groups.inf.ed.ac.uk/abcd/session-implementations.html
** Strategies
*** Extend class
    We can provide a superclass "Sendable<T>" which when extend would allow for them to be sent from a server via a send(Servable) method
    The sendable class could have a method entitled T getPayload() which would allow for us to retrieve the payload of the object... checked against the defined ProtocolStack
* TODOs
** TODO
   Reading
   Read about Erlang and Akka's message passing framework
* Reading
** Actor Model
   The actor model, as implemented in Erlang and Akka,
provides a strategy for the management of parallel programs.

Instead of normal parallel execution

           |  -> [Method A] -> |  A  |                  |
           |                   | A+B | <- [Method B] <- |
           |                   | A+B |                  |
           |                   |  A  | -> [Method B] -> |
           | <- [Method A] <-  |  A  |                  |

It provides an "actor" in the main work thread which has an "inbox" to which 
methods are passed and blocking of execution occurs, when one task is finished
the inbox is then polled and new tasks are taken from the inbox and executed.

           | -> [Method A] -> | A |                  |
           |                  | A | <- [Method B] <- |
           |                  | A |                  |
           | <- [Method A] <- | B |                  |
           |                  | B |                  |
           |                  | B | -> [Method B] -> |

           
* Context Plan and Survey

Around references - general "lit review" overview of problem space, other solutions, dynamic vs static

Checked system your end vs outwith the context of your environment

! [
  
]

** Language Theoretic Security
** Actor Model
** Session Types
** Static Session Type Implementations
** Dynamic Session Types Implementations
** Security Problems Regarding Protocols
   Talk about why my tertiary protocols matter 
   Kerboros - https://en.wikipedia.org/wiki/Security_protocol_notation

** Plan
Week to week annotation of the status of work


**Decisions Made

Implementation of graph -> list of next nodes as opposed to matrix, we care more about where the next link is than
adding new nodes to the graph!

The "address" of the actors need to be automatically generated and kept track of over the communication, also
while we have a schema for knowing what communication is acceptable from which actors the order in which the actors
start communication should be kept track of BY the protocol rather than pre ordained before hand

the protocol should keep a reference of which actor in the system is which actor and automatically check this as opposed
to the user imputing it through the address they are posting towards

Interesting protocol
Potentially look at IRC
Methods to improve usability of library
Internal DSL's for Java, Martin Fowler's book on DSLs' / Embedded DSL
Address management system of some sort
Potential interfacisation of Actor class

** Decisions Made 04/07

Think about concept of addresses further - maybe not such a big deal ?
Implementations of actors, get it running somehow ?
For all actors within the system, which actor name refers to which socket
CommunicationInterface, network socket, process ID, user interaction
actor interface, add tasks not ness queue but wider concept of sending processed and correct state transitions
try get concurrent processes working for next week

edwin example ~
length of string -> integer
add two numbers -> receive interger -> receive integer -> return interger

** Decision Made 11/07

Fix protocol on macOS
Break protocol description down into sub methods
Internal DSL extensions on some level ???
in built recursion
pick a protocol that we are going to implement
irc / http
potential visualisation software, little svg generating script
fault injection tool